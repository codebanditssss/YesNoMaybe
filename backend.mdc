---
description:
globs:
alwaysApply: false
---
# üöÄ YesNoMaybe Backend Development Plan

**Project**: Real-time Opinion Trading Platform  
**Stack**: Next.js + Supabase + TypeScript  
**Goal**: Market-ready MVP with live trading, order matching, and real-time updates

---

## üìä **Database Schema (‚úÖ COMPLETED)**

### **Tables Created:**
- ‚úÖ `markets` - Opinion questions/events to trade on
- ‚úÖ `orders` - User bets/positions (YES/NO)
- ‚úÖ `trades` - Matched orders between users
- ‚úÖ `user_balances` - Track user funds/points
- ‚úÖ `profiles` - User profile information

### **Core Functions:**
- ‚úÖ `match_order()` - Automatic order matching engine
- ‚úÖ `resolve_market()` - Market settlement and payout distribution
- ‚úÖ `update_updated_at_column()` - Timestamp triggers

### **Security:**
- ‚úÖ Row Level Security (RLS) policies
- ‚úÖ Foreign key constraints
- ‚úÖ Data validation checks
- ‚úÖ Proper indexing for performance

---

## üõ†Ô∏è **API Development Roadmap**

### **Phase 1: Core Market APIs (Days 1-2)**

#### **Market Management**
- [ ] `GET /api/markets` - List all markets with filters
  ```typescript
  // Query params: status, category, featured, limit, offset
  // Returns: Market[] with volume data
  ```

- [ ] `POST /api/markets` - Create new market (admin only)
  ```typescript
  // Body: { title, description, category, resolution_date, tags }
  // Auth: Admin role required
  ```

- [ ] `GET /api/markets/[id]` - Get specific market details
  ```typescript
  // Returns: Market with order book summary
  ```

- [ ] `PATCH /api/markets/[id]` - Update market (admin only)
  ```typescript
  // Body: Partial market update
  // Auth: Admin role required
  ```

- [ ] `POST /api/markets/[id]/resolve` - Resolve market outcome
  ```typescript
  // Body: { outcome: 'YES' | 'NO' }
  // Calls: resolve_market() function
  ```

### **Phase 2: Order & Trading APIs (Days 3-4)**

#### **Order Management**
- [ ] `POST /api/orders` - Place new order
  ```typescript
  // Body: { market_id, side, quantity, price }
  // Calls: match_order() function
  // Returns: { order_id, trade_id?, matched_quantity }
  ```

- [ ] `GET /api/orders` - Get user's orders
  ```typescript
  // Query params: status, market_id, limit
  // Auth: User can only see their orders
  ```

- [ ] `DELETE /api/orders/[id]` - Cancel open order
  ```typescript
  // Auth: User can only cancel their own orders
  // Only works for 'open' status orders
  ```

#### **Order Book & Trading**
- [ ] `GET /api/markets/[id]/orderbook` - Live order book
  ```typescript
  // Returns: { yes_orders: Order[], no_orders: Order[] }
  // Sorted by price and time priority
  ```

- [ ] `GET /api/trades` - Get recent trades
  ```typescript
  // Query params: market_id, user_id, limit
  // Returns: Trade[] with user details
  ```

### **Phase 3: User & Portfolio APIs (Days 5-6)**

#### **User Management**
- [ ] `GET /api/user/profile` - Get user profile
- [ ] `PATCH /api/user/profile` - Update user profile
- [ ] `GET /api/user/balance` - Get user balance details
- [ ] `GET /api/user/trades` - Get user's trade history
- [ ] `GET /api/user/portfolio` - Portfolio summary with P&L

#### **Analytics & Leaderboard**
- [ ] `GET /api/leaderboard` - Top performers
- [ ] `GET /api/markets/[id]/stats` - Market statistics
- [ ] `GET /api/admin/analytics` - Admin dashboard data

---

## üîÑ **Real-time Features (Days 7-8)**

### **Supabase Realtime Integration**

#### **Live Order Book Updates**
```typescript
// Subscribe to order changes
supabase
  .channel('orderbook')
  .on('postgres_changes', 
    { event: '*', schema: 'public', table: 'orders' },
    handleOrderUpdate
  )
  .subscribe()
```

#### **Trade Notifications**
```typescript
// Subscribe to new trades
supabase
  .channel('trades')
  .on('postgres_changes',
    { event: 'INSERT', schema: 'public', table: 'trades' },
    handleNewTrade
  )
  .subscribe()
```

#### **Market Updates**
```typescript
// Subscribe to market changes
supabase
  .channel('markets')
  .on('postgres_changes',
    { event: 'UPDATE', schema: 'public', table: 'markets' },
    handleMarketUpdate
  )
  .subscribe()
```

#### **Portfolio Sync**
```typescript
// Subscribe to balance changes
supabase
  .channel('balance')
  .on('postgres_changes',
    { event: 'UPDATE', schema: 'public', table: 'user_balances' },
    handleBalanceUpdate
  )
  .subscribe()
```

---

## üé® **Frontend Integration Plan (Days 9-10)**

### **Component Updates Required**

#### **Markets Component**
- [ ] Replace mock data with real API calls
- [ ] Add loading states and error handling
- [ ] Implement filters and search
- [ ] Add real-time market updates

#### **OrderbookPage Component**
- [ ] Connect to live order book API
- [ ] Implement real-time order updates
- [ ] Add order placement functionality
- [ ] Show current user's orders

#### **OrderPlacement Component**
- [ ] Form validation and submission
- [ ] Balance checking before order placement
- [ ] Success/error feedback
- [ ] Integration with order matching

#### **Portfolio Component**
- [ ] Real user balance display
- [ ] Live trade history
- [ ] P&L calculations
- [ ] Performance metrics

#### **TradeHistory Component**
- [ ] Paginated trade history
- [ ] Filter by market/date
- [ ] Export functionality
- [ ] Real-time updates for new trades

---

## üõ°Ô∏è **Security & Validation (Days 11-12)**

### **API Security**
- [ ] Input validation middleware
- [ ] Rate limiting (10 requests/minute per user)
- [ ] Authentication middleware for protected routes
- [ ] Admin role checking
- [ ] CORS configuration

### **Data Validation**
```typescript
// Order validation example
const orderSchema = z.object({
  market_id: z.string().uuid(),
  side: z.enum(['YES', 'NO']),
  quantity: z.number().int().min(1).max(1000),
  price: z.number().min(0.01).max(99.99)
})
```

### **Error Handling**
- [ ] Standardized error responses
- [ ] Logging with different levels
- [ ] Error monitoring integration
- [ ] Graceful degradation

---

## üìä **Testing Strategy**

### **Unit Tests**
- [ ] Order matching logic
- [ ] Market resolution logic
- [ ] Balance calculations
- [ ] API endpoint responses

### **Integration Tests**
- [ ] Complete order flow
- [ ] Real-time updates
- [ ] Database transactions
- [ ] Authentication flows

### **Load Testing**
- [ ] Concurrent order placement
- [ ] WebSocket connection limits
- [ ] Database performance under load

---

## üöÄ **Deployment Plan**

### **Environment Setup**
- [ ] Production Supabase project
- [ ] Environment variables configuration
- [ ] Database migrations deployment
- [ ] Vercel deployment configuration

### **Performance Optimization**
- [ ] Database query optimization
- [ ] API response caching
- [ ] Image optimization
- [ ] Bundle size optimization

### **Monitoring**
- [ ] Error tracking (Sentry)
- [ ] Performance monitoring
- [ ] Database monitoring
- [ ] Real-time connection monitoring

---

## üìà **Sample Data Setup**

### **Initial Markets to Create**
```sql
-- Sample markets for testing
INSERT INTO markets (title, description, category, resolution_date, created_by) VALUES
('Will AI replace engineers by 2030?', 'Will artificial intelligence completely replace software engineers by the year 2030?', 'technology', '2030-01-01', auth.uid()),
('Will Bitcoin reach $100k in 2024?', 'Will Bitcoin price reach $100,000 USD by end of 2024?', 'crypto', '2024-12-31', auth.uid()),
('Will India win 10+ medals in 2028 Olympics?', 'Will India win more than 10 medals in the 2028 Summer Olympics?', 'sports', '2028-08-15', auth.uid());
```

### **Test User Balances**
- All new users get ‚Çπ1000 starting balance
- Admin can add test funds for development

---

## üéØ **Success Metrics**

### **Technical KPIs**
- [ ] Order matching latency < 100ms
- [ ] 99.9% uptime
- [ ] Real-time updates < 500ms delay
- [ ] Support 100+ concurrent users

### **Business KPIs**
- [ ] User registration and retention
- [ ] Daily active traders
- [ ] Total trading volume
- [ ] Market liquidity metrics

---

## üö® **Known Challenges & Solutions**

### **Challenge 1: Order Matching Performance**
**Problem**: High-frequency trading could overwhelm the matching engine
**Solution**: Database-level matching with proper indexing and connection pooling

### **Challenge 2: Real-time Scalability**
**Problem**: Too many WebSocket connections
**Solution**: Supabase Realtime with channel limits and connection throttling

### **Challenge 3: Market Manipulation**
**Problem**: Users could try to manipulate prices
**Solution**: Order limits, rate limiting, and monitoring algorithms

---

## üìã **Daily Sprint Plan**

### **Week 1: Core Backend**
- **Day 1**: Market APIs
- **Day 2**: Order placement & matching
- **Day 3**: User management & portfolio
- **Day 4**: Real-time WebSocket setup
- **Day 5**: Frontend integration begins

### **Week 2: Polish & Production**
- **Day 6**: Complete frontend integration
- **Day 7**: Security & validation
- **Day 8**: Testing & bug fixes
- **Day 9**: Performance optimization
- **Day 10**: Deployment & monitoring

---

## üìö **Next Immediate Actions**

### **Priority 1** (Start Now):
1. Create `/api/markets` endpoint
2. Add sample market data
3. Test market fetching in frontend

### **Priority 2** (Next):
1. Build order placement API
2. Test order matching function
3. Create order book display

### **Priority 3** (Then):
1. Set up real-time subscriptions
2. Integrate with frontend components
3. Add error handling

---

**üéØ Goal**: Have a fully functional prediction market platform ready for real users in 10-12 days!

**üìû Ready to start building APIs? Let's begin with the markets endpoint!**
